---
layout: post
title:  "2019 IBM Dev. Apache Kafka 강의 정리 2편 (Producer 편)"
date:   2022-03-28 23:00:29 +0900
categories: Apache-Kafka
---

SK Telecom 고승범

# Kafka Producer

메시지를 브로커로 전송하는 역할

Ack = 0 빠른 전송, 메시지 손실 가능성 (0.29ms) 브로커 받았는지 안받았는지 모름
Ack = 1 빠른 전송, 약간의 메시지 손실 가능성 (1.05ms) 브로커가 받았는지 확인을 함
(손실이 일어날수 있는 경우 -> ack를 던져주자 마자 brocker가 죽음 leader가 다른 leader로 선출이 되는데
Replication이 안되는 경우 즉, 다른 broker 동기화가 이루어지지 않은 경우_
Ack = All 느린전송, 메시지 손실 없음 (2.05ms) -> 다른 follower가 받았는지 확인하는 것


￼

Buffer.memory (프로듀서가 가지고 있음)
Linger.ms (지연시간 만큼 대기했다가 send() 함)

메세지의 사이즈에 따라서 목적에 따라 적절한 튜닝이 필요함
예시)
Throughput								Latency(압축할 시간조차 아까운 경우)					Durability
Batch.size -> increase						linger.ms ->0									batch.size -> increase	
Linger.size -> increase						compression.type->none						linger.ms -> increase
Compression.type-> snappy,lz4				acks-> 0										acks-> all
* 무조건 압축이 필요함
Acks ->1

고민이 되는 순간 ( durability 와 latency 중 어떤것을 더 중점으로 둬야 하나) 이건 사업 별로 다름



```
Usecase
- 다른 종류의 에코 시스템들과 연결하기 위한 메시지 버스로 사용
- 실시간 파이프 라인과 배치 파이프라인
- 다양한 경우를 위해 데이터 종류별로 Multiple 클러스터를 만들고 데이터 센터간 연결
```

  Uber Kafka Architecture

  ![uber_kafka_ex](/public/img/kafka/uber.png)


# 일반 기업들이 발생되는 이슈
- Apache Kafka 에서 제공하는 기본값을 그대로 쓴다는 것이 이슈
- 상황에 알맞게 튜닝할 수 없다는 이슈

# Kafka options (매우 유용한 옵션)
1. log.rotetion.hours
  ```
  1KB/msg * 1000(msg/sec)*60(1min)*60(hour)*24(1day)*7days*3replica*10(topics)
  ```

    > - 초당 Data 가 9kb 발생할 경우 1주일에 168TB가 필요로 하게 되는 문제가 발생한다. (Disk full 현상이 나는 경우가 더러 일어남)
    <br/>
    > - 1주일 이상 카프카에 보관할 필요가 없다.
    <br/>
    > - 권장시간은 72시간 정도로 조정 (72TB 정도만 필요함)
    > - 재처리를 할수 있는 시간 3일이 제일 적당함 (critical 한 이슈가 없었음 - 잠깐문제가 된다면 금방해결 가능하다.)
<br/>

2. delete.topic.enable <br/>
  자신이 안쓰는 파일을 삭제하듯이 디스크 full이 날 경우에는 topic을 자동으로 삭제하게 됨
  ![disk](/public/img/kafka/disk.png)
  <br/><br/>
3. allow.auto.create.topics <br/>

```
A producer - atopic -> atopic a cluster
B producer - btopic -> btopic b cluster
```
이 옵션 자체는 producer가 직접 topic을 설정하지 않아도, topic이 cluster에 자동으로 생성한다.
 <br/> <br/>

문제점
  > - B producer가 A cluster에 topic을 던질수 있다.
  <br/>
  > - 용도별 분류가 어려워질수 있다.
  <br/>

아래와 같이 자신이 원하지 않는 토픽이 생기는 경우도 있었음

```
A-1 producer (shut down)
				a topic.   ————>    A cluster
A-2 producer 
```
<br/>
해결방법  <br/>
log.dirs 별도의 directory 를 설정해둔다.) Default로 temp dir에 메세지가 저장이 됨


 -->

<!-- 


You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. -->


<!-- Jekyll also offers powerful support for code snippets:

{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].
 -->


<!-- [jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ -->


<!-- # post-sample
> hi!

This is code
```ruby
print 'What the'
``` -->