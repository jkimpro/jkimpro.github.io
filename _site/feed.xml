<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-28T23:34:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">준의 직장 &lt;br /&gt;생존기</title><subtitle>Samsung Electronics &lt;br&gt; Data ETL  Engineer &lt;br&gt;</subtitle><entry><title type="html">2019 IBM Dev. Apache Kafka 강의 정리 1편 (기본)</title><link href="http://localhost:4000/apache-kafka/2022/03/28/post1.html" rel="alternate" type="text/html" title="2019 IBM Dev. Apache Kafka 강의 정리 1편 (기본)" /><published>2022-03-28T22:00:00+09:00</published><updated>2022-03-28T22:00:00+09:00</updated><id>http://localhost:4000/apache-kafka/2022/03/28/post1</id><content type="html" xml:base="http://localhost:4000/apache-kafka/2022/03/28/post1.html"><![CDATA[<p>SK Telecom 고승범</p>

<h1 id="kafka-기본">Kafka 기본</h1>
<p><br /></p>

<p>Kafka 의 어원 - 프란치 카프카의 어원을 가져왔고, 쓰기에 최적화 되었기 때문에 kafka 라고 명명함</p>

<p><br />
2012년 오픈소스로 공개됨, 현재 Confluent 사에서 kafka 와 관련 ecosystem들을 개발하는 중</p>

<p><br /></p>

<p>일반적인 Data transmission 이란, Source -&gt; destination 전달의 개념이다. 하지만 시스템이 고도화 됨으로서 각각의 destination과 source가 많아짐으로서 데이터의 복잡성이 증대, 정합성, 관리효율성이 떨어지게 되었는데, 이를 해결하기 위한 것이 kafka 이다. 구조자체를 단순화 하고, destination을 kafka로 통합 시키기 위하여 사용한다.
<br /><br />
Kafka의 장점으로는 Data의 장애, 변화, 재처리, 실시간 처리, 변화에 유연해진다는 점이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Usecase
- 다른 종류의 에코 시스템들과 연결하기 위한 메시지 버스로 사용
- 실시간 파이프 라인과 배치 파이프라인
- 다양한 경우를 위해 데이터 종류별로 Multiple 클러스터를 만들고 데이터 센터간 연결
</code></pre></div></div>

<p>Uber Kafka Architecture</p>

<p><img src="/public/img/kafka/uber.png" alt="uber_kafka_ex" /></p>

<h1 id="일반-기업들이-발생되는-이슈">일반 기업들이 발생되는 이슈</h1>
<ul>
  <li>Apache Kafka 에서 제공하는 기본값을 그대로 쓴다는 것이 이슈</li>
  <li>상황에 알맞게 튜닝할 수 없다는 이슈</li>
</ul>

<h1 id="kafka-options-매우-유용한-옵션">Kafka options (매우 유용한 옵션)</h1>
<ol>
  <li>log.rotetion.hours
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  1KB/msg * 1000(msg/sec)*60(1min)*60(hour)*24(1day)*7days*3replica*10(topics)
</code></pre></div>    </div>

    <blockquote>
      <ul>
        <li>초당 Data 가 9kb 발생할 경우 1주일에 168TB가 필요로 하게 되는 문제가 발생한다. (Disk full 현상이 나는 경우가 더러 일어남)
 <br /></li>
        <li>1주일 이상 카프카에 보관할 필요가 없다.
 <br /></li>
        <li>권장시간은 72시간 정도로 조정 (72TB 정도만 필요함)</li>
        <li>재처리를 할수 있는 시간 3일이 제일 적당함 (critical 한 이슈가 없었음 - 잠깐문제가 된다면 금방해결 가능하다.)
<br /></li>
      </ul>
    </blockquote>
  </li>
  <li>delete.topic.enable <br />
  자신이 안쓰는 파일을 삭제하듯이 디스크 full이 날 경우에는 topic을 자동으로 삭제하게 됨
  <img src="/public/img/kafka/disk.png" alt="disk" />
  <br /><br /></li>
  <li>allow.auto.create.topics <br /></li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A producer - atopic -&gt; atopic a cluster
B producer - btopic -&gt; btopic b cluster
</code></pre></div></div>
<p>이 옵션 자체는 producer가 직접 topic을 설정하지 않아도, topic이 cluster에 자동으로 생성한다.
 <br /> <br /></p>

<p>문제점</p>
<blockquote>
  <ul>
    <li>B producer가 A cluster에 topic을 던질수 있다.
<br /></li>
    <li>용도별 분류가 어려워질수 있다.
<br /></li>
  </ul>
</blockquote>

<p>아래와 같이 자신이 원하지 않는 토픽이 생기는 경우도 있었음</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A-1 producer (shut down)
				a topic.   ————&gt;    A cluster
A-2 producer 
</code></pre></div></div>
<p><br />
해결방법  <br />
log.dirs 별도의 directory 를 설정해둔다.) Default로 temp dir에 메세지가 저장이 됨</p>

<!-- 


You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. -->

<!-- Jekyll also offers powerful support for code snippets:


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].
 -->

<!-- [jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ -->

<!-- # post-sample
> hi!

This is code
```ruby
print 'What the'
``` -->]]></content><author><name></name></author><category term="Apache-Kafka" /><summary type="html"><![CDATA[SK Telecom 고승범]]></summary></entry><entry><title type="html">2019 IBM Dev. Apache Kafka 강의 정리 2편 (Producer 편)</title><link href="http://localhost:4000/apache-kafka/2022/03/28/post2.html" rel="alternate" type="text/html" title="2019 IBM Dev. Apache Kafka 강의 정리 2편 (Producer 편)" /><published>2022-03-28T20:00:29+09:00</published><updated>2022-03-28T20:00:29+09:00</updated><id>http://localhost:4000/apache-kafka/2022/03/28/post2</id><content type="html" xml:base="http://localhost:4000/apache-kafka/2022/03/28/post2.html"><![CDATA[<p>SK Telecom 고승범</p>

<h1 id="kafka-producer">Kafka Producer</h1>
<!-- <br/>

Kafka 의 어원 - 프란치 카프카의 어원을 가져왔고, 쓰기에 최적화 되었기 때문에 kafka 라고 명명함

<br/>
2012년 오픈소스로 공개됨, 현재 Confluent 사에서 kafka 와 관련 ecosystem들을 개발하는 중  
  
<br/>

일반적인 Data transmission 이란, Source -> destination 전달의 개념이다. 하지만 시스템이 고도화 됨으로서 각각의 destination과 source가 많아짐으로서 데이터의 복잡성이 증대, 정합성, 관리효율성이 떨어지게 되었는데, 이를 해결하기 위한 것이 kafka 이다. 구조자체를 단순화 하고, destination을 kafka로 통합 시키기 위하여 사용한다.
<br/><br/>
Kafka의 장점으로는 Data의 장애, 변화, 재처리, 실시간 처리, 변화에 유연해진다는 점이다.


```
Usecase
- 다른 종류의 에코 시스템들과 연결하기 위한 메시지 버스로 사용
- 실시간 파이프 라인과 배치 파이프라인
- 다양한 경우를 위해 데이터 종류별로 Multiple 클러스터를 만들고 데이터 센터간 연결
```

  Uber Kafka Architecture

  ![uber_kafka_ex](/public/img/kafka/uber.png)


# 일반 기업들이 발생되는 이슈
- Apache Kafka 에서 제공하는 기본값을 그대로 쓴다는 것이 이슈
- 상황에 알맞게 튜닝할 수 없다는 이슈

# Kafka options (매우 유용한 옵션)
1. log.rotetion.hours
  ```
  1KB/msg * 1000(msg/sec)*60(1min)*60(hour)*24(1day)*7days*3replica*10(topics)
  ```

    > - 초당 Data 가 9kb 발생할 경우 1주일에 168TB가 필요로 하게 되는 문제가 발생한다. (Disk full 현상이 나는 경우가 더러 일어남)
    <br/>
    > - 1주일 이상 카프카에 보관할 필요가 없다.
    <br/>
    > - 권장시간은 72시간 정도로 조정 (72TB 정도만 필요함)
    > - 재처리를 할수 있는 시간 3일이 제일 적당함 (critical 한 이슈가 없었음 - 잠깐문제가 된다면 금방해결 가능하다.)
<br/>

2. delete.topic.enable <br/>
  자신이 안쓰는 파일을 삭제하듯이 디스크 full이 날 경우에는 topic을 자동으로 삭제하게 됨
  ![disk](/public/img/kafka/disk.png)
  <br/><br/>
3. allow.auto.create.topics <br/>

```
A producer - atopic -> atopic a cluster
B producer - btopic -> btopic b cluster
```
이 옵션 자체는 producer가 직접 topic을 설정하지 않아도, topic이 cluster에 자동으로 생성한다.
 <br/> <br/>

문제점
  > - B producer가 A cluster에 topic을 던질수 있다.
  <br/>
  > - 용도별 분류가 어려워질수 있다.
  <br/>

아래와 같이 자신이 원하지 않는 토픽이 생기는 경우도 있었음

```
A-1 producer (shut down)
				a topic.   ————>    A cluster
A-2 producer 
```
<br/>
해결방법  <br/>
log.dirs 별도의 directory 를 설정해둔다.) Default로 temp dir에 메세지가 저장이 됨


 -->

<!-- 


You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. -->

<!-- Jekyll also offers powerful support for code snippets:


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].
 -->

<!-- [jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ -->

<!-- # post-sample
> hi!

This is code
```ruby
print 'What the'
``` -->]]></content><author><name></name></author><category term="Apache-Kafka" /><summary type="html"><![CDATA[SK Telecom 고승범]]></summary></entry></feed>